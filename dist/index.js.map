{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolveStr = require( '@stdlib/stats-base-ztest-alternative-resolve-str' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar quantile = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar cdf = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar mean = require( '@stdlib/stats-strided-mean' ).ndarray;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test using alternative indexing semantics.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Collection} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Collection} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float64' );\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction ztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, offsetX, sigmay, y, strideY, offsetY, out ) { // eslint-disable-line max-len, max-params\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar ymean;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tNX <= 0 ||\n\t\tNY <= 0 ||\n\t\tisnan( alpha ) ||\n\t\tisnan( diff ) ||\n\t\tisnan( sigmax ) ||\n\t\tisnan( sigmay ) ||\n\t\tsigmax <= 0.0 ||\n\t\tsigmay <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.xmean = NaN;\n\t\tout.ymean = NaN;\n\t\treturn out;\n\t}\n\t// Compute the standard error of the mean:\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( ( xvar / NX ) + ( yvar / NY ) );\n\n\t// Compute the arithmetic means of the input arrays:\n\txmean = mean( NX, x, strideX, offsetX );\n\tymean = mean( NY, y, strideY, offsetY );\n\n\t// Compute the test statistic (i.e., the z-score, which is the standardized difference between the sample means of x and y, adjusted by the hypothesized difference, in units of the standard error):\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0 - ( alpha / 2.0 ) );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alpha = alpha;\n\tout.pValue = pValue;\n\tout.statistic = stat;\n\tout.ci = WORKSPACE;\n\tout.alternative = alt;\n\tout.nullValue = diff;\n\tout.xmean = xmean;\n\tout.ymean = ymean;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Collection} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Collection} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float64' );\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction ztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, sigmay, y, strideY, out ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( NX, NY, alternative, alpha, diff, sigmax, x, strideX, stride2offset( NX, strideX ), sigmay, y, strideY, stride2offset( NY, strideY ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Z-test.\n*\n* @module @stdlib/stats-strided-ztest2\n*\n* @example\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float64' );\n* var ztest2 = require( '@stdlib/stats-strided-ztest2' );\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*\n* @example\n* var Results = require( '@stdlib/stats-base-ztest-two-sample-results-float64' );\n* var ztest2 = require( '@stdlib/stats-strided-ztest2' );\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2.ndarray( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "resolveStr", "isnan", "quantile", "cdf", "mean", "sqrt", "abs", "Float64Array", "PINF", "NINF", "normalCDF", "normalQuantile", "WORKSPACE", "ztest2", "NX", "NY", "alternative", "alpha", "diff", "sigmax", "x", "strideX", "offsetX", "sigmay", "y", "strideY", "offsetY", "out", "pValue", "stderr", "xmean", "ymean", "xvar", "yvar", "stat", "alt", "q", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "ztest2", "NX", "NY", "alternative", "alpha", "diff", "sigmax", "x", "strideX", "sigmay", "y", "strideY", "out", "setReadOnly", "main", "ndarray"]
}
